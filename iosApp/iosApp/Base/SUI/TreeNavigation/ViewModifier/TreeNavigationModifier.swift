//
//  TreeNavigationModifier.swift
//  iosApp
//
//  Created by Denis Dmitriev on 04.04.2025.
//

import SwiftUI

/**
 * `TreeNavigationModifier` ‚Äî —ç—Ç–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –¥–µ—Ä–µ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–º –ø—É—Ç–∏.
 *
 * –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é —Ä–æ–ª—å:
 * - –°–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Å—Ç–µ–∫–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—á–µ—Ä–µ–∑ `childStack`).
 * - –ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ç–µ–∫–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—É—Ç—å.
 * - –í—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—É—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (`navigationModel.syncPath`).
 * - –°—Ç—Ä–æ–∏—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (—á–µ—Ä–µ–∑ `destinationBuilder`).
 *
 * –°–≤–æ–π—Å—Ç–≤–∞:
 * - `childStack`: –û–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `ObservableState<ChildStack<C, Destination>>`, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–µ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
 * - `navigationModel`: –û–±—ä–µ–∫—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª—É `ObservableNavigation`, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.
 * - `destinationBuilder`: –ó–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–∏–ø–∞ `Destination`, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
 *
 * –ú–µ—Ç–æ–¥—ã:
 * - `body(content:)`: –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, –¥–æ–±–∞–≤–ª—è—è –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—Ç–µ–∫–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –º–æ–¥–µ–ª—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
 */
struct TreeNavigationModifier<C: AnyObject, Destination: Hashable & AnyObject, DestinationView: View>: ViewModifier {
    /// –°—Ç–µ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    @ObservedObject var childStack: KotlinStateFlow<ChildStack<C, Destination>>
    
    /// –ú–æ–¥–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —É–ø—Ä–∞–≤–ª—è—é—â–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    var navigationModel: any ObservableNavigation
    
    /// –ó–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
    let destinationBuilder: (Destination) -> DestinationView
    
    init(
        childStack: KotlinStateFlow<ChildStack<C, Destination>>,
        navigationModel: any ObservableNavigation,
        destinationBuilder: @escaping (Destination) -> DestinationView
    ) {
        self._childStack = .init(wrappedValue: childStack)
        self.navigationModel = navigationModel
        self.destinationBuilder = destinationBuilder
    }
    
    func body(content: Content) -> some View {
        content
            .navigationDestination(for: Destination.self) { destinationBuilder($0) }
            // MARK: –í–∞–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ `onReceive(_:perform:)` –≤–º–µ—Å—Ç–æ `onChange(of:perform:)`
            .onReceive(_childStack.wrappedValue.$wrappedValue) { newStack in
                var fromPath = navigationModel.flatPath.compactMap { $0 as? Destination }
                let toPath = newStack.items.map(\.instance)

                // –ï—Å–ª–∏ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—É—Ç—è—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏
                if
                    let rootItem = childStack.wrappedValue.items.map(\.instance).first,
                    fromPath.first != rootItem,
                    toPath.last != rootItem
                {
                    fromPath.insert(rootItem, at: 0)
                }
                guard fromPath.isEmpty == false else {
                    return
                }
                
                guard fromPath != toPath else {
                    return
                }
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—É—Ç—å
                let state = getDestinationState(fromPath: fromPath, toPath: toPath)
                
                let message = "-------\n"
                + "üß≠ \(type(of: Destination.self)) \(state)\n"
                + "From: \(getPathDescription(path: fromPath))\n"
                + "To: \(getPathDescription(path: toPath))\n"
                Log.navigation.debug(logEntry: .text(message))
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ —Å –º–æ–¥–µ–ª—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                navigationModel.syncPath(state: state, type: Destination.self)
            }
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ç–µ–∫—É—â–µ–º –∏ —Ü–µ–ª–µ–≤–æ–º –ø—É—Ç–∏.
     *
     * - Parameters:
     *   - fromPath: –¢–µ–∫—É—â–∏–π –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
     *   - toPath: –ù–æ–≤—ã–π –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
     * - Returns: –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –º–æ–¥–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
     */
    private func getDestinationState(fromPath: [Destination], toPath: [Destination]) -> NavigationState {
        if toPath.count == 1, let rootItem = toPath.first {
            return .root(rootItem)
        } else if fromPath.count < toPath.count, let lastItem = toPath.last {
            return .push(AnyHashable(lastItem))
        } else if fromPath.count > toPath.count {
            return .pop
        } else if fromPath.count > 2, toPath.count == 1 {
            return .popToRoot
        } else {
            return .empty
        }
    }
    
    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
     *
     * - Parameter path: –ü—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ `Destination`.
     * - Returns: –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏.
     */
    private func getPathDescription(path: [Destination]) -> String {
        return path.map({ $0 as AnyHashable }).pathDescription(count: 3)
    }
}

extension View {
    /**
     * –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä TreeNavigationModifier`.
     * –≠—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É–ø—Ä–æ—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö, –¥–æ–±–∞–≤–ª—è—è —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≤—è–∑–∫–∏
     * —Å—Ç–µ–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –º–æ–¥–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
     *
     * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å `TreeNavigationModifier` –∫ –ª—é–±–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
     * –ø—É—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ —Å—Ç–µ–∫–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
     *
     * - Parameter childStack: –°—Ç–µ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é.
     * - Parameter navigationModel: –ú–æ–¥–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
     * - Parameter destination: –ó–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
     * - Returns: –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
     */
    func treeNavigation<C: AnyObject, Destination: Hashable & AnyObject, DestinationView: View>(
        childStack: KotlinStateFlow<ChildStack<C, Destination>>,
        navigationModel: any ObservableNavigation,
        destination: @escaping (Destination) -> DestinationView
    ) -> some View {
        self.modifier(
            TreeNavigationModifier(
                childStack: childStack,
                navigationModel: navigationModel,
                destinationBuilder: destination
            )
        )
    }
}
